---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lukasz.
--- DateTime: 08.01.2021 20:23
---
--board = {
--    {8,0,0,0,0,0,0,0,0},
--    {0,0,3,6,0,0,0,0,0},
--    {0,7,0,0,9,0,2,0,0},
--    {0,5,0,0,0,7,0,0,0},
--    {0,0,0,0,4,5,7,0,0},
--    {0,0,0,1,0,0,0,3,0},
--    {0,0,1,0,0,0,0,6,8},
--    {0,0,8,5,0,0,0,1,0},
--    {0,9,0,0,0,0,4,0,0},
--}

local function readBoard()
    local file = io.open("input-board.txt")
    local row = 0
    local board = {
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    }

    if file then
        for line in file:lines() do
            row = row + 1
            for i = 1, #line do
                local c = line:sub(i,i)
                board[row][i] = tonumber(c)
            end
        end
    end
    return board
end

local function horizontalSlice(tbl, row, start_i, end_i)
    local sliced = {}
    for i = start_i or 1, end_i or 9, 1 do
        sliced[#sliced + 1] = tbl[row][i]
    end
    return sliced
end
local function verticalSlice(tbl, col, start_i, end_i)
    local sliced = {}
    for i = start_i or 1, end_i or 9, 1 do
        sliced[#sliced + 1] = tbl[i][col]
    end
    return sliced
end

local function boxSlice(tbl, x, y)
    local sliced = {}
    for row = x + 1, x + 3 do
        for col = y + 1, y + 3 do
            sliced[#sliced + 1] = tbl[row][col]
        end
    end
    return sliced
end

local function contains(table, element)
    for _, value in pairs(table) do
        if value == element then
            return true
        end
    end
    return false
end

local function printVector(vector)
    local row_string = ''
    for i = 1, #vector do
        row_string = row_string .. ' ' .. tostring(vector[i])
    end
    print(row_string)
end

local function printBoard(board)
    for x = 1,9
    do
        printVector(horizontalSlice(board, x))
    end
end
function round(x)
    return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)
end

local function getPossibleOptions(board, x, y)
    ok = {1, 2, 3, 4, 5, 6, 7, 8, 9}
    for i = 9, 1, -1 do
        box_x = (math.floor((x - 1) / 3)) * 3
        box_y = (math.floor((y - 1) / 3)) * 3
        if contains(horizontalSlice(board, x), i)
                or contains(verticalSlice(board, y), i)
                or contains(boxSlice(board, box_x, box_y), i) then
            table.remove(ok, i)
        end
    end
    return ok
end


function solve(board, x, y)
    if y > 9 and x < 9 then
        x = x + 1
        y = 1
    end
    if x >= 9 and y > 9 then
        return true
    end
    if board[x][y] ~= 0 then
        return solve(board, x, y + 1)
    end
    options = getPossibleOptions(board, x, y)
    if #options == 0 then
        return false
    end
    for _, value in pairs(options) do
        board[x][y] = value
        if solve(board, x, y + 1) then
            return true
        end
    end
    board[x][y] = 0
    return false
end


board = readBoard()
solve(board, 1, 1)
printBoard(board)